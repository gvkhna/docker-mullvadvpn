name: Docker

on:
  schedule:
   - cron: '0 0 * * *'
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Build and Deploy
        run: |          
          echo GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME
          # GITHUB_EVENT_NAME='schedule' when cron triggered
          # GITHUB_EVENT_NAME='push' when commit is pushed

          URL=$(curl -w "%{url_effective}\n" -I -L -s -S https://mullvad.net/download/app/deb/latest/ -o /dev/null)
          VERSION=$(echo $URL | grep -oP '(?<=MullvadVPN-).*(?=_amd64)')
          IMAGE_ID=ghcr.io/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo URL=$URL
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          echo "Checking version tag exists..."
          if docker manifest inspect $IMAGE_ID:$VERSION > /dev/null 2>&1; then
            echo "Container Registry: ${VERSION} Found"
            VERSION_EXISTS=0
          else
            VERSION_EXISTS=1
            echo "Container Registry: ${VERSION} Not Found"
          fi
          echo VERSION_EXISTS=$VERSION_EXISTS
          
          # Check daily for new version of Mullvad automatically
          # If trigger is a cron build, and existing version already has been built, skip.
          # Otherwise, it was a push, or a new version exists... in which case build/deploy.
          if [[ "${GITHUB_EVENT_NAME}" == "schedule" && "${VERSION_EXISTS}" == "0" ]]; then
            echo "------------------------------------"
            echo "Plan: Skipping build..."
            echo "------------------------------------"
          else
            echo "------------------------------------"
            echo "Plan: Building and deploying Container..."
            echo "------------------------------------"
            docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
            
            echo "Logging in to registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
            
            echo "Pushing new build..."
            docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
            docker tag $IMAGE_NAME $IMAGE_ID:latest
            docker image push --all-tags $IMAGE_ID
          fi